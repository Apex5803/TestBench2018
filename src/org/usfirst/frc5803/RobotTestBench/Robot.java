// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5803.RobotTestBench;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc5803.RobotTestBench.commands.*;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.AutonomousCommand;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.CenterSwitchAuto;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.CommandB;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.CommandF;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.DriveForwardFiveFeet;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.ScaleLeft;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.ScaleRight;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.SwitchLeft;
import org.usfirst.frc5803.RobotTestBench.commands.autonomous.SwitchRight;
import org.usfirst.frc5803.RobotTestBench.models.GameState;
import org.usfirst.frc5803.RobotTestBench.subsystems.*;
import org.usfirst.frc5803.RobotTestBench.utils.ApexPreferences;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
	
    Command autonomousCommand;
    SendableChooser<String> autoChooser;
    //SendableChooser<Command> chooser = new SendableChooser<>();
    

    public GameState gameState;
    
    public static OI oi;
    public static DriveTrain driveTrain;
    public static Climber climber;
     public static Compressor compressor = new Compressor (0);
    
     //public static ApexPreferences prefs;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    	autoChooser= new SendableChooser<String>();
    	autoChooser.addDefault("CommandA", "CommandA");
    	autoChooser.addObject("SwitchLeft", "SwitchLeft");
    	autoChooser.addObject("SwitchRight", "SwitchRight");
    	autoChooser.addObject("ScaleLeft", "ScaleLeft");
    	autoChooser.addObject("ScaleRight", "ScaleRight");
    	SmartDashboard.putData("Auto Mode Chooser", autoChooser);
  //this is a useless comment
        RobotMap.init();
        driveTrain = new DriveTrain();
        climber = new Climber();
        compressor.setClosedLoopControl(true);
        //prefs = ApexPreferences.getInstance();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser

       // chooser.addDefault("Autonomous Command", new AutonomousCommand());
       // chooser.addObject("other auto", new AutonomousCommand());

        //SmartDashboard.putData("Auto mode", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }
    @Override
	public void disabledPeriodic() {
		this.gameState = new GameState(DriverStation.getInstance().getGameSpecificMessage());
		//System.out.println(gameState.mySwitchSide);
		Scheduler.getInstance().run();
	}
/*
    @Override
    public void disabledPeriodic() {
      Scheduler.getInstance().run();
    }
    */

    @Override
    public void autonomousInit() {
//    	autonomousCommand = (Command) autoChooser.getSelected();
//    	autonomousCommand.start();
    	  	
    	
    	
    	
    	String selectedAuto = (String)autoChooser.getSelected();
		switch (selectedAuto) {
		case "CommandA": 
			autonomousCommand = new CommandA();
			 break;
		case "SwitchLeft":
			autonomousCommand = new SwitchLeft();
			break;
		case "SwitchRight":
			autonomousCommand = new SwitchRight();
			break;
		case "ScaleLeft":
			autonomousCommand = new ScaleLeft();
			break;
		case "ScaleRight":
			autonomousCommand = new ScaleRight();
			break;
		default:
			autonomousCommand = new CommandA();
			break; 
		}
		
    	//AutoSelect.init();
    	/*
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    */
    	//autonomousCommand = new SwitchLeft();
//    	autonomousCommand = new SwitchRight();
//    	autonomousCommand = new ScaleLeft();
//    	autonomousCommand = new ScaleRight();
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
    	//AutoSelect.periodic();
    	Scheduler.getInstance().run();
//    	 SmartDashboard.putNumber("Left Encoder Position", RobotMap.driveTrainDriveTrainL1.getSelectedSensorPosition(0));
//         SmartDashboard.putNumber("Left Encoder Velocity", RobotMap.driveTrainDriveTrainL1.getSelectedSensorVelocity(0));
//         SmartDashboard.putNumber("Right Encoder Position", RobotMap.driveTrainDriveTrainR1.getSelectedSensorPosition(0));
//         SmartDashboard.putNumber("Right Encoder Velocity", RobotMap.driveTrainDriveTrainR1.getSelectedSensorVelocity(0));

    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //System.out.println(gameState);
    	
    }
}
